#!/bin/sh
#
# SPDX-License-Identifier: MIT
#
# pm_helper - A POSIX-compliant tool to assist with installing and managing
# test ports across multiple devices running various custom firmware.
#

# ==============================================================================
# CHANGELOG
# ==============================================================================
#
# v3.9 - (Current) Fixed Host String Parsing
#      - Resolved a "bad substitution" error that occurred when providing an
#        explicit 'CFW,IP' host string on the command line.
#      - Corrected the logic in `resolve_host_string` to check for an alias
#        only when the input string does not contain a comma.
#
# v3.8 - (Current) Added Alias Scoping and CFW Extensibility
#      - The script now sources an optional ~/.config/pm_cfw.cfg for user-defined
#        or overridden CFW definitions.
#      - Added global flags `-l` (local-only) and `-g` (global-only) to control
#        which pm_devices.cfg file is loaded for alias resolution.
#
# v3.7 - (Current) Added 'ALL' Keyword for Hosts
#      - Added the ability to use 'ALL' as the <hosts> argument to target every
#        defined alias in the config files for install, update, scp, and
#        harbourmaster commands.
#      - The `ssh` command now explicitly disallows 'ALL'.
#
# v3.6 - (Current) Added Device Management Commands
#      - Added `host_add` command to add or update a host alias in the
#        local or global configuration file.
#      - Added `host_del` command to remove a host alias.
#      - Both commands use the `-g` flag to target the global config file and
#        safely modify files using a temporary-file pattern.
#
# v3.5 - (Current) Added Remote Command Debugging
#      - Added a `debug()` function to print commands before execution.
#      - Implemented debug logging for all remote commands (`ssh`, `scp`, `rsync`)
#        across all functions to improve visibility and troubleshooting.
#
# v3.4 - Fixed `rsync` Pathing in Update Command
#      - Resolved a bug where `rsync` on the remote device would incorrectly
#        prepend the user's home directory to the destination path.
#
# v3.3 - Final Bug Fixes and Polish
#      - Fixed `scp` command failure by correcting argument quoting.
#      - Fixed help text printing raw ANSI escape codes.
#      - Corrected `harbourmaster install` pathing to use a reliable relative path.
#
# v3.2 - Added a persistent changelog to the script header.
#
# v3.1 - Bug Fixes & Refinements
#      - Fixed critical loop bug where only the first host was processed.
#      - Updated CFW definitions with user-provided corrections.
#
# v3.0 - POSIX `sh` Compliance Rewrite
#      - Major rewrite for POSIX `sh` compliance for maximum portability.
#
# v2.0 - Bash 3.2+ Compatibility
#      - Addressed Bash v4+ dependency by removing associative arrays.
#
# v1.0 - Initial Release
#      - First version created with core functionality using Bash 4+ features.
#
# ==============================================================================

# --- Script Setup ---
set -u

# --- Color Definitions ---
C_RESET='\033[0m'
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_YELLOW='\033[0;33m'
C_BLUE='\033[0;34m'
C_CYAN='\033[0;36m'
C_BOLD='\033[1m'

# --- Helper Functions ---
debug() { printf "%b>>>%b %b%s%b\n" "$C_YELLOW" "$C_RESET" "$C_BOLD" "$1" "$C_RESET"; } 
info() { printf "%b==>%b %b%s%b\n" "$C_CYAN" "$C_RESET" "$C_BOLD" "$1" "$C_RESET"; }
success() { printf "%b-->%b %s\n" "$C_GREEN" "$C_RESET" "$1"; }
warn() { printf "%b-->%b %s\n" "$C_YELLOW" "$C_RESET" "$1"; }
error() { printf "%b!!!>%b %b%s%b\n" "$C_RED" "$C_RESET" "$C_BOLD" "$1" "$C_RESET" >&2; }
die() { error "$1"; exit 1; }

# ==============================================================================
# CFW INFORMATION
# ==============================================================================

KNOWN_CFWS="AmberELEC ArkOS ArkOS2 Batocera JELOS Knulli muOS muOS2 RetroDECK ROCKNIX UnofficialOS"

# AmberELEC
CFW_AmberELEC_USERNAME="root"
CFW_AmberELEC_PORTMASTER="/roms/ports/PortMaster"
CFW_AmberELEC_PORT_DATA="/roms/ports"
CFW_AmberELEC_PORT_SCRIPT="/roms/ports"
# ArkOS (Single SD)
CFW_ArkOS_USERNAME="ark"
CFW_ArkOS_PORTMASTER="/roms/tools/PortMaster"
CFW_ArkOS_PORT_DATA="/roms/ports"
CFW_ArkOS_PORT_SCRIPT="/roms/ports"
# ArkOS2 (Dual SD)
CFW_ArkOS2_USERNAME="ark"
CFW_ArkOS2_PORTMASTER="/roms2/tools/PortMaster"
CFW_ArkOS2_PORT_DATA="/roms2/ports"
CFW_ArkOS2_PORT_SCRIPT="/roms2/ports"
# Batocera
CFW_Batocera_USERNAME="root"
CFW_Batocera_PORTMASTER="/userdata/system/.local/share/PortMaster"
CFW_Batocera_PORT_DATA="/userdata/roms/ports"
CFW_Batocera_PORT_SCRIPT="/userdata/roms/ports"
# JELOS
CFW_JELOS_USERNAME="root"
CFW_JELOS_PORTMASTER="/roms/ports/PortMaster"
CFW_JELOS_PORT_DATA="/roms/ports"
CFW_JELOS_PORT_SCRIPT="/roms/ports"
# Knulli
CFW_Knulli_USERNAME="root"
CFW_Knulli_PORTMASTER="/userdata/system/.local/share/PortMaster"
CFW_Knulli_PORT_DATA="/userdata/roms/ports"
CFW_Knulli_PORT_SCRIPT="/userdata/roms/ports"
# muOS (Single SD)
CFW_muOS_USERNAME="root"
CFW_muOS_PORTMASTER="/mnt/mmc/MUOS/PortMaster"
CFW_muOS_PORT_DATA="/mnt/mmc/ports"
CFW_muOS_PORT_SCRIPT="/mnt/mmc/ROMS/Ports"
# muOS2 (Dual SD)
CFW_muOS2_USERNAME="root"
CFW_muOS2_PORTMASTER="/mnt/mmc/MUOS/PortMaster"
CFW_muOS2_PORT_DATA="/mnt/sdcard/ports"
CFW_muOS2_PORT_SCRIPT="/mnt/sdcard/ROMS/Ports"
# RetroDECK
CFW_RetroDECK_USERNAME="deck"
CFW_RetroDECK_PORTMASTER="/home/deck/.var/app/net.retrodeck.retrodeck/data/PortMaster"
CFW_RetroDECK_PORT_DATA="/run/media/mmcblk0p1/retrodeck/PortMaster/ports/"
CFW_RetroDECK_PORT_SCRIPT="/run/media/mmcblk0p1/retrodeck/roms/portmaster/"
# ROCKNIX
CFW_ROCKNIX_USERNAME="root"
CFW_ROCKNIX_PORTMASTER="/roms/ports/PortMaster"
CFW_ROCKNIX_PORT_DATA="/roms/ports"
CFW_ROCKNIX_PORT_SCRIPT="/roms/ports"
# UnofficialOS (was uOS)
CFW_UnofficialOS_USERNAME="root"
CFW_UnofficialOS_PORTMASTER="/roms/ports/PortMaster"
CFW_UnofficialOS_PORT_DATA="/roms/ports"
CFW_UnofficialOS_PORT_SCRIPT="/roms/ports"

if [ -f "$HOME/.config/pm_cfw.cfg" ]; then
    # Add custom firmwares here.
    . "$HOME/.config/pm_cfw.cfg"
fi

# ==============================================================================
# HOST STUFF
# ==============================================================================

get_all_aliases_string() {
    # Use `set` to list all variables, filter for our aliases, format the output,
    # and convert the newline-separated list into a colon-separated one.
    set | grep '^ALIAS_' | sed 's/ALIAS_//' | cut -d'=' -f1 | tr '\n' ':' | sed 's/:$//'
}

load_aliases() {
    # This internal function does the actual file processing
    _process_cfg() {
        cfg_file=$1
        if [ -f "$cfg_file" ]; then
            while IFS='=' read -r key val; do
                case "$key" in ''|'#'*) continue ;; esac
                key=$(echo "$key" | tr -d '[:space:]'); val=$(echo "$val" | tr -d '[:space:]')
                if [ -n "$key" ] && [ -n "$val" ]; then eval "ALIAS_${key}=\"\$val\""; fi
            done < "$cfg_file"
        fi
    }

    # The global `alias_scope` variable controls which files are read
    case "$alias_scope" in
        "local")
            info "Loading aliases from LOCAL config only."
            _process_cfg "$PWD/pm_devices.cfg"
            ;;
        "global")
            info "Loading aliases from GLOBAL config only."
            _process_cfg "$HOME/.config/pm_devices.cfg"
            ;;
        *) # Default case
            _process_cfg "$HOME/.config/pm_devices.cfg"
            _process_cfg "$PWD/pm_devices.cfg"
            ;;
    esac
}

resolve_host_string() {
    host_str=$1
    cfw=""
    ip=""

    # FIX: Check if the input is an alias BEFORE trying to parse it as CFW,IP.
    # An explicit CFW,IP will contain a comma; an alias will not.
    case "$host_str" in
        # Does NOT contain a comma, so it must be an alias.
        *,*)
            : # This is a no-op. String already looks like CFW,IP.
            ;;
        *)
            # No comma found, so try to resolve it as an alias.
            eval "resolved_alias=\${ALIAS_${host_str}:-\"\"}"
            if [ -n "$resolved_alias" ]; then
                # It was a valid alias, so update host_str with the resolved value.
                host_str=$resolved_alias
            fi
            ;;
    esac

    # Now, parse the final host_str which must be in CFW,IP format.
    case "$host_str" in
        *,*)
            ip=$(echo "$host_str" | cut -d, -f2)
            cfw=$(echo "$host_str" | cut -d, -f1)
            ;;
        *)
            # If we get here, it was not an explicit CFW,IP and it was not a valid alias.
            error "Invalid host format: '$host_str'. Must be a valid alias or 'CFW,IP'."
            return 1
            ;;
    esac

    # Validate the CFW and return the structured string.
    eval "user_var=\${CFW_${cfw}_USERNAME:-\"\"}"
    if [ -z "$user_var" ]; then
        error "Unknown CFW: '$cfw'. Supported: $KNOWN_CFWS"
        return 1
    fi
    eval "pm_var=\${CFW_${cfw}_PORTMASTER}"
    eval "data_var=\${CFW_${cfw}_PORT_DATA}"
    eval "script_var=\${CFW_${cfw}_PORT_SCRIPT}"
    echo "${cfw};${ip};${user_var};${pm_var};${data_var};${script_var}"
}

parse_host_list() {
    hosts_input=$1
    old_ifs=$IFS
    IFS=':'
    for item in $hosts_input; do
        if [ -n "$item" ]; then
            resolved=$(resolve_host_string "$item")
            if [ $? -eq 0 ]; then
                echo "$resolved"
            fi
        fi
    done | sort -u
    IFS=$old_ifs
}

# ==============================================================================
# COMMAND IMPLEMENTATIONS
# ==============================================================================

cmd_install() {
    [ $# -lt 2 ] && die "Usage: pm_helper install <hosts> <zip_file>"
    hosts_str=$1
    zip_file=$2
    zip_basename=$(basename "$zip_file")

    if [ "$hosts_str" = "ALL" ]; then
        info "Resolving 'ALL' to all defined hosts..."
        hosts_str=$(get_all_aliases_string)
        if [ -z "$hosts_str" ]; then die "No host aliases are defined. Cannot use 'ALL'."; fi
        debug "Expanded 'ALL' to: $hosts_str"
    fi

    resolved_hosts=$(parse_host_list "$hosts_str")
    [ -z "$resolved_hosts" ] && die "No valid hosts were resolved. Aborting."
    [ ! -f "$zip_file" ] && die "File not found: $zip_file"
    
    host_count=$(echo "$resolved_hosts" | wc -l | tr -d ' ')
    info "Installing '$zip_basename' on $host_count host(s)..."

    while IFS=';' read -r cfw ip user pm_path data_path script_path; do
        printf "\n%b>>> Processing %b%s @ %s%b\n" "$C_BLUE" "$C_BOLD" "$cfw" "$ip" "$C_RESET"

        info "Copying '$zip_basename' to $user@$ip:~/"
        debug "scp \"$zip_file\" \"$user@$ip:~/\""
        if ! scp "$zip_file" "$user@$ip:~/" < /dev/null; then
            error "Failed to scp file to $ip. Skipping."
            continue
        fi

        info "Running harbourmaster to install..."
        remote_install_path="./$zip_basename"
        remote_cmd="\"${pm_path}/harbourmaster\" --no-check install \"${remote_install_path}\""
        
        debug "ssh $user@$ip \"$remote_cmd\""
        if ! ssh "$user@$ip" "$remote_cmd" < /dev/null; then
            error "harbourmaster command failed on $ip. Please check device logs."
        else
            success "Installation successful on $ip."
        fi
    done <<EOF
$resolved_hosts
EOF
}

cmd_update() {
    [ $# -lt 3 ] && die "Usage: pm_helper update <hosts> <port_script.sh> <port_directory/>"
    hosts_str=$1
    port_script=$2
    port_dir=$3

    if [ "$hosts_str" = "ALL" ]; then
        info "Resolving 'ALL' to all defined hosts..."
        hosts_str=$(get_all_aliases_string)
        if [ -z "$hosts_str" ]; then die "No host aliases are defined. Cannot use 'ALL'."; fi
        debug "Expanded 'ALL' to: $hosts_str"
    fi

    resolved_hosts=$(parse_host_list "$hosts_str")
    [ -z "$resolved_hosts" ] && die "No valid hosts were resolved. Aborting."
    [ ! -f "$port_script" ] && die "Port script not found: '$port_script'"
    [ ! -d "$port_dir" ] && die "Port directory not found: '$port_dir'"

    host_count=$(echo "$resolved_hosts" | wc -l | tr -d ' ')
    info "Updating script and data on $host_count host(s)..."
    
    while IFS=';' read -r cfw ip user pm_path data_path script_path; do
        printf "\n%b>>> Processing %b%s @ %s%b\n" "$C_BLUE" "$C_BOLD" "$cfw" "$ip" "$C_RESET"

        info "Syncing Port Script: '$port_script'"
        debug "rsync -avz --no-g --no-o \"$port_script\" \"$user@$ip:$script_path/\""
        if ! rsync -avz --no-g --no-o "$port_script" "$user@$ip:$script_path/" < /dev/null; then
            error "rsync of script failed for $ip. Skipping."
            continue
        fi

        info "Syncing Port Data: '$port_dir'"
        debug "rsync -avz --no-g --no-o \"$port_dir/\" \"$user@$ip:$data_path/$(basename "$port_dir")/\""
        if ! rsync -avz --no-g --no-o "$port_dir/" "$user@$ip:$data_path/$(basename "$port_dir")/" < /dev/null; then
            error "rsync of data directory failed for $ip."
        else
            success "Update successful on $ip."
        fi
    done <<EOF
$resolved_hosts
EOF
}

cmd_harbourmaster() {
    [ $# -lt 2 ] && die "Usage: pm_helper harbourmaster <hosts> <command>"
    hosts_str=$1
    shift
    passed_command="$*"

    if [ "$hosts_str" = "ALL" ]; then
        info "Resolving 'ALL' to all defined hosts..."
        hosts_str=$(get_all_aliases_string)
        if [ -z "$hosts_str" ]; then die "No host aliases are defined. Cannot use 'ALL'."; fi
        debug "Expanded 'ALL' to: $hosts_str"
    fi

    resolved_hosts=$(parse_host_list "$hosts_str")
    [ -z "$resolved_hosts" ] && die "No valid hosts were resolved. Aborting."
    host_count=$(echo "$resolved_hosts" | wc -l | tr -d ' ')
    info "Executing on $host_count host(s): harbourmaster $passed_command"

    while IFS=';' read -r cfw ip user pm_path data_path script_path; do
        printf "\n%b>>> Processing %b%s @ %s%b\n" "$C_BLUE" "$C_BOLD" "$cfw" "$ip" "$C_RESET"
        remote_cmd="\"${pm_path}/harbourmaster\" $passed_command"
        debug "ssh $user@$ip \"$remote_cmd\""
        if ! ssh "$user@$ip" "$remote_cmd" < /dev/null; then
            error "Command failed on $ip."
        else
            success "Command successful on $ip."
        fi
    done <<EOF
$resolved_hosts
EOF
}

cmd_ssh() {
    [ $# -ne 1 ] && die "Usage: pm_helper ssh <single_host>"
 
    resolved_hosts=$(parse_host_list "$1")
 
    [ -z "$resolved_hosts" ] && die "Host '$1' could not be resolved."
 
    host_count=$(echo "$resolved_hosts" | wc -l | tr -d ' ')
 
    if [ "$host_count" -ne 1 ]; then
        error "The 'ssh' command can only be used with a single host."
        warn "You provided an alias or string that resolved to $host_count hosts."
        return 1
    fi
 
    cfw=$(echo "$resolved_hosts" | cut -d';' -f1)
    ip=$(echo "$resolved_hosts" | cut -d';' -f2)
    user=$(echo "$resolved_hosts" | cut -d';' -f3)
 
    info "Connecting to $cfw @ $ip as user $user..."
    ssh "$user@$ip"
}

cmd_scp() {
    [ $# -lt 3 ] && die "Usage: pm_helper scp <hosts> <DEST_DIR/path> <file1> [file2...]"
    hosts_str=$1
    dest_path_str=$2
    shift 2

    if [ "$hosts_str" = "ALL" ]; then
        info "Resolving 'ALL' to all defined hosts..."
        hosts_str=$(get_all_aliases_string)

        if [ -z "$hosts_str" ]; then
            die "No host aliases are defined. Cannot use 'ALL'.";
        fi

        debug "Expanded 'ALL' to: $hosts_str"
    fi

    resolved_hosts=$(parse_host_list "$hosts_str")
    [ -z "$resolved_hosts" ] && die "No valid hosts were resolved. Aborting."
    [ $# -eq 0 ] && die "No files specified to copy."

    case "$dest_path_str" in
        */*)
            dest_base=$(echo "$dest_path_str" | cut -d/ -f1)
            dest_subdir="/$(echo "$dest_path_str" | cut -d/ -f2-)"
            ;;
        *)
            dest_base=$dest_path_str
            dest_subdir=""
            ;;
    esac
    
    host_count=$(echo "$resolved_hosts" | wc -l | tr -d ' ')
    info "Copying $# file(s) to '$dest_path_str' on $host_count host(s)..."

    while IFS=';' read -r cfw ip user pm_path data_path script_path; do
        printf "\n%b>>> Processing %b%s @ %s%b\n" "$C_BLUE" "$C_BOLD" "$cfw" "$ip" "$C_RESET"

        remote_base_path=""
        case "$dest_base" in
            PORT_SCRIPT) remote_base_path=$script_path ;;
            PORT_DATA) remote_base_path=$data_path ;;
            PORTMASTER) remote_base_path=$pm_path ;;
            HOME) remote_base_path="~" ;;
            *) error "Invalid destination base '$dest_base'. Must be PORT_SCRIPT, PORT_DATA, PORTMASTER, or HOME."; continue ;;
        esac

        final_remote_path="${remote_base_path}${dest_subdir}"
        
        info "Ensuring remote directory exists: $final_remote_path"
        mkdir_cmd="mkdir -p \"$final_remote_path\""
        debug "ssh $user@$ip \"$mkdir_cmd\""
        if ! ssh "$user@$ip" "$mkdir_cmd" < /dev/null; then
             error "Could not create remote directory on $ip. Skipping."
             continue
        fi

        info "Copying files to $user@$ip:$final_remote_path"
        debug "scp -r $@ \"$user@$ip:$final_remote_path\""
        if ! scp -r "$@" "$user@$ip:$final_remote_path" < /dev/null; then
            error "scp command failed for $ip."
        else
            success "Copy successful to $ip."
        fi
    done <<EOF
$resolved_hosts
EOF
}

cmd_cfws() {
    info "Listing all known Custom Firmware configurations"
    
    # Temporarily change IFS to split the KNOWN_CFWS string
    old_ifs=$IFS
    IFS=' '
    
    for cfw_name in $KNOWN_CFWS; do
        printf "\n%b%s%b\n" "$C_BLUE" "$cfw_name" "$C_RESET"
        
        # Use eval to dynamically get the value of each variable
        eval "user_var=\$CFW_${cfw_name}_USERNAME"
        eval "pm_var=\$CFW_${cfw_name}_PORTMASTER"
        eval "data_var=\$CFW_${cfw_name}_PORT_DATA"
        eval "script_var=\$CFW_${cfw_name}_PORT_SCRIPT"
        
        printf "  %-12s %s\n" "USERNAME:" "$user_var"
        printf "  %-12s %s\n" "PORTMASTER:" "$pm_var"
        printf "  %-12s %s\n" "PORT_DATA:" "$data_var"
        printf "  %-12s %s\n" "PORT_SCRIPT:" "$script_var"
    done
    
    IFS=$old_ifs
}

cmd_hosts() {
    info "Host aliases defined in configuration files"
    printf "%bNote: Local definitions ($PWD/pm_devices.cfg) override global ones.%b\n" "$C_YELLOW" "$C_RESET"
    global_cfg="$HOME/.config/pm_devices.cfg"
    printf "\n%b>>> Global Config: %s%b\n" "$C_BLUE" "$global_cfg" "$C_RESET"

    if [ -f "$global_cfg" ]; then
        grep -v '^\s*#' "$global_cfg" | grep .
    else
        warn "File not found."
    fi

    local_cfg="$PWD/pm_devices.cfg"
    printf "\n%b>>> Local Config: %s%b\n" "$C_BLUE" "$local_cfg" "$C_RESET"
    if [ -f "$local_cfg" ]; then
        grep -v '^\s*#' "$local_cfg" | grep .
    else
        warn "File not found."
    fi

    printf "\n%b>>> Effective Aliases (after overrides)%b\n" "$C_BLUE" "$C_RESET"
    effective_aliases=$(set | grep '^ALIAS_' | sed 's/ALIAS_//' | sort)
    if [ -n "$effective_aliases" ]; then
        echo "$effective_aliases" | while IFS='=' read -r key val; do
             printf "%b%s%b = %s\n" "$C_BOLD" "$key" "$C_RESET" "$val"
        done
    else
        warn "No aliases defined."
    fi
}

cmd_host_add() {
    global_flag=0

    if [ $# -gt 0 ] && [ "$1" = "-g" ]; then
        global_flag=1
        shift
    fi

    [ $# -ne 3 ] && die "Usage: pm_helper host_add [-g] <alias> <cfw> <ipaddress>"
    alias=$1
    cfw=$2
    ip=$3

    eval "user_var=\${CFW_${cfw}_USERNAME:-\"\"}"
    if [ -z "$user_var" ]; then
        error "Unknown CFW: '$cfw'. Supported: $KNOWN_CFWS"
        return 1
    fi

    if [ $global_flag -eq 1 ]; then
        cfg_file="$HOME/.config/pm_devices.cfg"
        location="global"
        # Ensure the directory exists
        mkdir -p "$(dirname "$cfg_file")"
    else
        cfg_file="$PWD/pm_devices.cfg"
        location="local"
    fi
    
    # Create the file if it doesn't exist
    touch "$cfg_file"

    # Use a temporary file for safe editing
    tmp_file=$(mktemp)
    # Ensure temp file is cleaned up on exit
    trap 'rm -f "$tmp_file"' EXIT

    # Check if the alias already exists to provide a better message
    if grep -q "^[[:space:]]*$alias[[:space:]]*=" "$cfg_file"; then
        action="Updated"
        # Remove the old entry
        grep -v "^[[:space:]]*$alias[[:space:]]*=" "$cfg_file" > "$tmp_file"
        mv "$tmp_file" "$cfg_file"
    else
        action="Added"
    fi

    # Add the new or updated entry to the file
    echo "$alias = $cfw,$ip" >> "$cfg_file"
    success "$action alias '$alias' in $location configuration ($cfg_file)"
}

cmd_host_del() {
    global_flag=0
    if [ $# -gt 0 ] && [ "$1" = "-g" ]; then
        global_flag=1
        shift
    fi

    [ $# -ne 1 ] && die "Usage: pm_helper host_del [-g] <alias>"
    alias=$1

    if [ $global_flag -eq 1 ]; then
        cfg_file="$HOME/.config/pm_devices.cfg"
        location="global"
    else
        cfg_file="$PWD/pm_devices.cfg"
        location="local"
    fi

    if [ ! -f "$cfg_file" ]; then
        error "Configuration file not found: $cfg_file"
        return 1
    fi
    
    # Check if the alias exists before trying to delete
    if ! grep -q "^[[:space:]]*$alias[[:space:]]*=" "$cfg_file"; then
        error "Alias '$alias' not found in $location configuration."
        return 1
    fi

    tmp_file=$(mktemp)
    trap 'rm -f "$tmp_file"' EXIT

    # Filter out the line with the alias
    grep -v "^[[:space:]]*$alias[[:space:]]*=" "$cfg_file" > "$tmp_file"
    mv "$tmp_file" "$cfg_file"

    success "Deleted alias '$alias' from $location configuration ($cfg_file)"
}

# ==============================================================================
# HELP SYSTEM
# ==============================================================================
show_help() {
    printf "%b\n" "${C_BOLD}pm_helper${C_RESET} - A tool for managing test ports on multiple devices."
    printf "\n"
    # UPDATED: New usage string
    printf "%b\n" "${C_BOLD}Usage:${C_RESET} pm_helper [-l|-g] <command> [options...]"
    printf "\n"
    printf "%b\n" "${C_YELLOW}Scope Flags (optional):${C_RESET}"
    printf "%b\n" "  ${C_CYAN}-l${C_RESET} : Use only the local ./pm_devices.cfg for aliases."
    printf "%b\n" "  ${C_CYAN}-g${C_RESET} : Use only the global ~/.config/pm_devices.cfg for aliases."
    printf "\n"
    printf "%b\n" "${C_YELLOW}Available Commands:${C_RESET}"
    printf "%b\n" "  ${C_CYAN}install${C_RESET}         Install a port .zip file."
    printf "%b\n" "  ${C_CYAN}update${C_RESET}          Update a port's script and data directory."
    printf "%b\n" "  ${C_CYAN}harbourmaster${C_RESET}   Run a raw command with harbourmaster."
    printf "%b\n" "  ${C_CYAN}scp${C_RESET}             Copy files to a predefined directory on devices."
    printf "%b\n" "  ${C_CYAN}ssh${C_RESET}             Connect to a single device."
    printf "%b\n" "  ${C_CYAN}cfws${C_RESET}            List all supported CFW and their variables."
    printf "%b\n" "  ${C_CYAN}hosts${C_RESET}           List all configured host aliases."
    printf "%b\n" "  ${C_CYAN}host_add${C_RESET}        Add or update a host alias in the config."
    printf "%b\n" "  ${C_CYAN}host_del${C_RESET}        Delete a host alias from the config."
    printf "%b\n" "  ${C_CYAN}help${C_RESET}            Show this help message."
    printf "\n"
    printf "%b\n" "Run '${C_BOLD}pm_helper <command> --help${C_RESET}' for command-specific help."
}

show_cmd_help() {
    cmd=$1
    case "$cmd" in
    install)
        printf "%b\n" "${C_BOLD}Usage: pm_helper install <hosts> <zip_file>${C_RESET}"
        printf "\n"
        printf "%b\n" "Copies a port .zip file to the host(s) and installs it using harbourmaster."
        printf "\n"
        ;;
    update)
        printf "%b\n" "${C_BOLD}Usage: pm_helper update <hosts> <port_script.sh> <port_directory/>${C_RESET}"
        printf "\n"
        printf "%b\n" "Updates a port by syncing a new script and data directory to the host(s)."
        printf "\n"
        ;;
    harbourmaster)
        printf "%b\n" "${C_BOLD}Usage: pm_helper harbourmaster <hosts> <command_and_args>${C_RESET}"
        printf "\n"
        printf "%b\n" "Executes a raw command via the harbourmaster executable on the host(s)."
        printf "\n"
        ;;
    scp)
        printf "%b\n" "${C_BOLD}Usage: pm_helper scp <hosts> <destination> <file1> [file2...]${C_RESET}"
        printf "\n"
        printf "%b\n" "Copies files to a predefined location on host(s): PORT_SCRIPT, PORT_DATA, PORTMASTER, HOME"
        printf "\n"
        ;;
    ssh)
        printf "%b\n" "${C_BOLD}Usage: pm_helper ssh <single_host>${C_RESET}"
        printf "\n"
        printf "%b\n" "Opens an interactive SSH session to a single specified host."
        printf "\n"
        ;;
    cfws)
        printf "%b\n" "${C_BOLD}Usage: pm_helper cfws${C_RESET}"
        printf "\n"
        printf "%b\n" "List all supported CFW and their variables."
        printf "\n"
        ;;
    hosts)
        printf "%b\n" "${C_BOLD}Usage: pm_helper hosts${C_RESET}"
        printf "\n"
        printf "%b\n" "Displays all configured host aliases."
        printf "\n"
        ;;
    host_add)
        printf "%b\n" "${C_BOLD}Usage: pm_helper host_add [-g] <alias> <cfw> <ipaddress>${C_RESET}"
        printf "\n"
        printf "%b\n" "Adds or updates a host alias in the configuration file."
        printf "%b\n" "  ${C_CYAN}-g${C_RESET} : Modify the global config (~/.config/pm_devices.cfg) instead of the local one."
        printf "\n"
        ;;
    host_del)
        printf "%b\n" "${C_BOLD}Usage: pm_helper host_del [-g] <alias>${C_RESET}"
        printf "\n"
        printf "%b\n" "Deletes a host alias from the configuration file."
        printf "%b\n" "  ${C_CYAN}-g${C_RESET} : Modify the global config instead of the local one."
        printf "\n"
        ;;
    *)
        error "No help available for unknown command '$cmd'"
        ;;
    esac
}

# ==============================================================================
# MAIN SCRIPT LOGIC
# ==============================================================================

# Default alias scope
alias_scope="default"

# Check for optional scope flags BEFORE processing the command
case "$1" in
    -l)
        alias_scope="local"
        shift
        ;;
    -g)
        alias_scope="global"
        shift
        ;;
esac

# Check for command-specific help request
for arg in "$@"; do
    if [ "$arg" = "--help" ]; then
        # We need to pass the original command, not the flags
        show_cmd_help "$1"
        exit 0
    fi
done

COMMAND=${1:-""}
if [ -z "$COMMAND" ]; then
    show_help
    exit 1
fi
shift

case "$COMMAND" in
    host_add|host_del)
        # These commands don't need aliases loaded beforehand
        "cmd_$COMMAND" "$@"
        ;;
    *)
        # Load aliases according to the scope set earlier
        load_aliases
        case "$COMMAND" in
            install|update|harbourmaster|scp|cfws|ssh|hosts)
                "cmd_$COMMAND" "$@"
                ;;
            help)
                show_help
                ;;
            *)
                error "Unknown command: '$COMMAND'"
                show_help
                exit 1
                ;;
        esac
        ;;
esac
